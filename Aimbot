local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local Camera = workspace.CurrentCamera
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")

_G.Aimbot = _G.Aimbot or false
_G.Aimbot_FOV_Radius = _G.Aimbot_FOV_Radius or 200
_G.Aimbot_FOV_Color = _G.Aimbot_FOV_Color or Color3.fromRGB(255, 255, 255)
_G.Aimbot_AimPart = _G.Aimbot_AimPart or "Head"
_G.Aimbot_TeamCheck = _G.Aimbot_TeamCheck or false
_G.Aimbot_Draw_FOV = _G.Aimbot_Draw_FOV or true
_G.Aimbot_Onscreen = _G.Aimbot_Onscreen or true
_G.Aiming = _G.Aiming or false
_G.Aimbot_Smoothness = _G.Aimbot_Smoothness or 0.1
_G.FriendList = _G.FriendList or {}
_G.Aimbot_WallCheck = _G.Aimbot_WallCheck or true

local FOVCircle = Drawing.new("Circle")
FOVCircle.Thickness = 2
FOVCircle.Filled = false
FOVCircle.Transparency = 1

local function UpdateFOVCircle()
    FOVCircle.Radius = _G.Aimbot_FOV_Radius
    FOVCircle.Color = _G.Aimbot_FOV_Color
    FOVCircle.Visible = _G.Aimbot and _G.Aimbot_Draw_FOV
end

UpdateFOVCircle()

local function checkWall(targetCharacter)
    if not targetCharacter then return true end
    local targetPart = targetCharacter:FindFirstChild(_G.Aimbot_AimPart)
    if not targetPart then return true end

    local origin = Camera.CFrame.Position
    local direction = (targetPart.Position - origin).unit * (targetPart.Position - origin).magnitude
    local raycastParams = RaycastParams.new()
    raycastParams.FilterDescendantsInstances = {LocalPlayer.Character, targetCharacter}
    raycastParams.FilterType = Enum.RaycastFilterType.Blacklist

    local raycastResult = workspace:Raycast(origin, direction, raycastParams)
    return raycastResult and raycastResult.Instance ~= nil
end

local function GetClosestPlayer()
    local closestPlayer = nil
    local shortestDistance = _G.Aimbot_FOV_Radius

    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character then
            local targetPart = player.Character:FindFirstChild(_G.Aimbot_AimPart)
            if targetPart then
                local isSameTeam = _G.Aimbot_TeamCheck and player.Team == LocalPlayer.Team
                local isFriend = table.find(_G.FriendList, player.Name) ~= nil

                if not isSameTeam and not isFriend then
                    local partPosition = targetPart.Position
                    local screenPoint, onScreen = Camera:WorldToViewportPoint(partPosition)

                    if (onScreen or not _G.Aimbot_Onscreen) and (not _G.Aimbot_WallCheck or not checkWall(player.Character)) then
                        local distance = (Vector2.new(screenPoint.X, screenPoint.Y) - UserInputService:GetMouseLocation()).Magnitude
                        if distance < shortestDistance then
                            closestPlayer = player
                            shortestDistance = distance
                        end
                    end
                end
            end
        end
    end

    return closestPlayer
end

local currentTarget = nil

UserInputService.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton2 then
        _G.Aiming = true
    end
end)

UserInputService.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton2 then
        _G.Aiming = false
        currentTarget = nil
    end
end)

RunService.RenderStepped:Connect(function()
    FOVCircle.Position = UserInputService:GetMouseLocation()
    UpdateFOVCircle()

    if _G.Aiming and _G.Aimbot then
        if not currentTarget or not currentTarget.Character or not currentTarget.Character:FindFirstChild(_G.Aimbot_AimPart) then
            currentTarget = GetClosestPlayer()
        end

        if currentTarget and currentTarget.Character and currentTarget.Character:FindFirstChild(_G.Aimbot_AimPart) then
            local targetPosition = currentTarget.Character[_G.Aimbot_AimPart].Position
            local lookAt = CFrame.new(Camera.CFrame.Position, targetPosition)
            Camera.CFrame = CFrame.new(Camera.CFrame.Position, lookAt.Position)
        end
    end
end)

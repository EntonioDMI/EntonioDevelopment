local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local Camera = workspace.CurrentCamera
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")

_G.Aimbot = _G.Aimbot or false
_G.Aimbot_FOV_Radius = _G.Aimbot_FOV_Radius or 150
_G.Aimbot_FOV_Color = _G.Aimbot_FOV_Color or Color3.fromRGB(255, 255, 255)
_G.Aimbot_AimPart = _G.Aimbot_AimPart or "Head"
_G.Aimbot_TeamCheck = _G.Aimbot_TeamCheck or false
_G.Aimbot_Draw_FOV = _G.Aimbot_Draw_FOV or true
_G.Aimbot_Onscreen = _G.Aimbot_Onscreen or true
_G.Aiming = _G.Aiming or false
_G.Aimbot_Smoothness = _G.Aimbot_Smoothness or 1
_G.FriendList = _G.FriendList or {}
_G.Aimbot_WallCheck = _G.Aimbot_WallCheck or true

local fovCircle = Drawing.new("Circle")
fovCircle.Thickness = 2
fovCircle.Radius = _G.Aimbot_FOV_Radius
fovCircle.Filled = false
fovCircle.Color = _G.Aimbot_FOV_Color
fovCircle.Visible = false

local currentTarget = nil

local function checkTeam(player)
    return _G.Aimbot_TeamCheck and player.Team == LocalPlayer.Team
end

local function checkFriend(player)
    return table.find(_G.FriendList, player.Name) ~= nil
end

local function checkWall(targetCharacter)
    local targetPart = targetCharacter:FindFirstChild(_G.Aimbot_AimPart)
    if not targetPart then return false end

    local origin = Camera.CFrame.Position
    local direction = (targetPart.Position - origin).unit * (targetPart.Position - origin).magnitude
    local raycastParams = RaycastParams.new()
    raycastParams.FilterDescendantsInstances = {LocalPlayer.Character}
    raycastParams.FilterType = Enum.RaycastFilterType.Blacklist

    local raycastResult = workspace:Raycast(origin, direction, raycastParams)
    return raycastResult == nil or raycastResult.Instance:IsDescendantOf(targetCharacter)
end

local function getTarget()
    local nearestPlayer = nil
    local shortestCursorDistance = _G.Aimbot_FOV_Radius

    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild(_G.Aimbot_AimPart) and not checkTeam(player) and not checkFriend(player) then
            local targetPart = player.Character[_G.Aimbot_AimPart]
            local headPos = Camera:WorldToViewportPoint(targetPart.Position)
            local screenPos = Vector2.new(headPos.X, headPos.Y)
            local mousePos = UserInputService:GetMouseLocation()
            local cursorDistance = (screenPos - mousePos).Magnitude

            if cursorDistance < shortestCursorDistance and headPos.Z > 0 then
                if not _G.Aimbot_WallCheck or checkWall(player.Character) then
                    shortestCursorDistance = cursorDistance
                    nearestPlayer = player
                end
            end
        end
    end

    return nearestPlayer
end

local function aimAt(player)
    local targetPart = player.Character[_G.Aimbot_AimPart]
    local targetPosition = targetPart.Position
    local targetCFrame = CFrame.new(Camera.CFrame.Position, targetPosition)
    Camera.CFrame = Camera.CFrame:Lerp(targetCFrame, _G.Aimbot_Smoothness)
end

RunService.RenderStepped:Connect(function()
    fovCircle.Position = UserInputService:GetMouseLocation()
    fovCircle.Radius = _G.Aimbot_FOV_Radius
    fovCircle.Visible = _G.Aimbot and _G.Aimbot_Draw_FOV

    if _G.Aiming and _G.Aimbot then
        currentTarget = getTarget()

        if currentTarget then
            aimAt(currentTarget)
        end
    else
        currentTarget = nil
    end
end)

UserInputService.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton2 then
        _G.Aiming = true
    end
end)

UserInputService.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton2 then
        _G.Aiming = false
    end
end)
